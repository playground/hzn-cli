https://github.com/open-horizon/anax/tree/master/anax-in-container

cd go/src/github.com/open-horizon/anax

docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

export arch=arm64
export USE_DOCKER_BUILDX=true
export opsys=Linux
export ANAX_IMAGE_VERSION=1.0.0
export DOCKER_IMAGE_VERSION=1.0.0  should be ANAX_IMAGE_VERSION

make anax-image

docker run -d -t --name amd64_anax --privileged -p 127.0.0.1:8081:8510 -v /var/run/docker.sock:/var/run/docker.sock -v /var/tmp/horizon:/var/tmp/horizon openhorizon/amd64_anax:1.0.0

export HORIZON_URL='http://localhost:8081'


Dockerfile.ubi.amd64
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.0

LABEL vendor="IBM"
LABEL summary="The agent in a general purpose container."
LABEL description="A container which holds the edge node agent, to be used in environments where there is no operating sys>

ARG DOCKER_VER=19.03.8

# yum is not installed, use microdnf instead
# shadow-utils contains groupadd and adduser commands
# install docker cli
# create required directories
RUN microdnf update -y --nodocs && microdnf clean all && microdnf install --nodocs -y shadow-utils sudo \
    && microdnf install --nodocs -y openssl ca-certificates \
    && microdnf install -y wget iptables vim-minimal procps tar \
    && wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \
    && chmod +x ./jq \
    && mv jq /usr/bin \
    && curl -4fsSLO https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VER}.tgz \
    && tar xzvf docker-${DOCKER_VER}.tgz --strip 1 -C /usr/bin docker/docker \
    && rm docker-${DOCKER_VER}.tgz \
    && mkdir -p /licenses /usr/horizon/bin /usr/horizon/web /var/horizon \
    && mkdir -p /etc/horizon/agbot/policy.d /etc/horizon/policy.d /etc/horizon/trust

RUN microdnf install nodejs
RUN npm cache clean -f
RUN npm install -g n
RUN n stable
RUN npm install -g hzn-cli

# add license file
COPY LICENSE.txt /licenses

# copy the horizon configurations
COPY config/anax.json /etc/horizon/
COPY config/hzn.json /etc/horizon/

# copy anax and hzn binaries
ADD anax /usr/horizon/bin/
ADD hzn /usr/bin/

WORKDIR /root
COPY script/anax.service /root/

# You can add a 2nd arg to this on the docker run cmd or the CMD statement in another dockerfile, to configure a specific >
ENTRYPOINT ["/root/anax.service", "start"]

oh-mesh

oh deploy createDeployment --name frontend --image quay.io/skupper/hello-world-frontend
oh deploy exposeDeployment --name frontend --port 8080 --type LoadBalancer

oh deploy createDeployment --name backend --image quay.io/skupper/hello-world-backend
oh deploy exposeDeployment --name backend --port 8080

k3s kubectl -n ohmesh-frontend-k3s-ns logs skupper-router-544bf88bb4-xdxd8
k3s kubectl -n ohmesh-frontend-k3s-ns logs skupper-router-544bf88bb4-xdxd8 -c agent
kubectl -n ohmesh-frontend-k3s-ns exec -i agent-6ff5f98f9-95v8r -- hzn node list
k3s kubectl get events -n ohmesh-backend-k3s-ns

k3s kubectl exec -it ohmesh-backend-f5c846596-swmxc -n ohmesh-backend-k3s-ns -- /bin/sh
cat hello
wget http://0.0.0.0:8080/api/health
cat health
wget http://0.0.0.0:8080/api/data
wget http://0.0.0.0:8080/api/date
netstat -anp

===============================
If dialog installation candidate,

You must enable the main repository in order to install the package lsb-release:

sudo add-apt-repository main
I highly recommend you to enable the Universe repository too:

sudo add-apt-repository universe
Run apt update after enabling the repositories:

sudo apt update
=================================

- hzn deploycheck all -b policy-ibm.myservicename_1.1.0 -n afcea-edge to check compatibility of the deployment policy
since the deployment policy was for x86_64 and the service was for x86_64
{
  "compatible": false,
  "reason": {
    "afcea/myservicename_1.1.0_x86_64": "Policy Incompatible: Architecture does not match."
  }
}
- need to publish service for arch amd64
- hzn exchange service list afcea/myservicename_1.1.0_x86_64 -l > myservice.json to get the service definition and modify it for amd64
{
  "label": "myservicename for amd64",
  "description": "",
  "documentation": "",
  "public": false,
  "url": "myservicename",
  "version": "1.1.0",
  "arch": "amd64",
  "sharable": "singleton",
  "matchHardware": {},
  "requiredServices": [],
  "userInput": [],
  "deployment": {
    "services": {
      "camerastuff": {
        "binds": [
          "/tmp:/root/.cache/torch/hub:rw"
        ],
        "environment": [],
        "image": "default-route-openshift-image-registry.apps.afcea.demo.local/ibm-edge/second-image@sha256:ee76942e954f9ff1da2fffe91038e979ffeee1bc61974798075f22ee41db1cae",
        "network": "",
        "ports": [
          {
            "HostIP": "0.0.0.0",
            "HostPort": "5000:5000/tcp"
          }
        ],
        "privileged": true,
        "secrets": {}
      }
    }
  },
  "clusterDeployment": "",
  "clusterDeploymentSignature": ""
}
- since I don't have the keys, ran hzn key create jeff jeff
Creating RSA PSS private and public keys, and an x509 certificate for distribution. This is a CPU-intensive operation and, depending on key length and platform, may take a while. Key generation on an amd64 or ppc64 system using the default key length will complete in less than 1 minute.
Created keys:
 	/home/afcea/.hzn/keys/service.private.key
	/home/afcea/.hzn/keys/service.public.pem

export KEY_TEST_DIR=/home/afcea/.hzn/keys
- publish the service with the myservice.json
hzn exchange service publish -r "fkuntke/hofbox-chirpstackus:20240131::" -I  -f myservice.json -k ${KEY_TEST_DIR}/service.private.key -K ${KEY_TEST_DIR}/service.public.pem

- check for compatibility again, run hzn deploycheck all -b policy-ibm.myservicename_1.1.0 -n afcea-edge
{
  "compatible": true,
  "reason": {
    "afcea/myservicename_1.1.0_amd64": "Compatible"
  }
}
- hzn eventlog list
  "2024-06-24 21:52:19:   Agreement 05656bd129903b873b04a6249fd09714b2d5dae1e85dd3f855111a0bfac2a240 already exists, ignoring proposal: myservicename",
  "2024-06-24 21:52:29:   Agreement reached for service myservicename. The agreement id is 05656bd129903b873b04a6249fd09714b2d5dae1e85dd3f855111a0bfac2a240.",
  "2024-06-24 21:52:29:   Start dependent services for afcea/myservicename.",
  "2024-06-24 21:52:29:   Start workload service for afcea/myservicename.",
  "2024-06-24 21:52:29:   Image loaded for afcea/myservicename.",
  "2024-06-24 21:52:30:   Workload service containers for afcea/myservicename are up and running."

- node got the agreement
[
  {
    "name": "Policy for afcea/afcea-edge merged with afcea/policy-ibm.myservicename_1.1.0",
    "current_agreement_id": "05656bd129903b873b04a6249fd09714b2d5dae1e85dd3f855111a0bfac2a240",
    "consumer_id": "IBM/agbot",
    "agreement_creation_time": "2024-06-24 21:52:18 +0200 CEST",
    "agreement_accepted_time": "2024-06-24 21:52:28 +0200 CEST",
    "agreement_finalized_time": "2024-06-24 21:52:29 +0200 CEST",
    "agreement_execution_start_time": "2024-06-24 21:52:30 +0200 CEST",
    "agreement_data_received_time": "",
    "agreement_protocol": "Basic",
    "workload_to_run": {
      "url": "myservicename",
      "org": "afcea",
      "version": "1.1.0",
      "arch": "amd64"
    }
  }
]

- upload it using this script (loadResource is a script that can take a service or pattern or a deployment policy from one org and re-create it in a different org)
  wget https://raw.githubusercontent.com/open-horizon/examples/master/tools/loadResources; chmod +x loadResources
  ./loadResources myservice.json



  382  hzn deploycheck all -b policy-ibm.myservicename_1.1.0 -n afcea-edge
  383  arch
  384  hzn exchange service list
  385  hzn exchange service list -l
  386  hzn exchange service list afcea/myservicename_1.1.0_x86_64 -l > myservice.json
  387  nano myservice.json
  388  hzn exchange service listauth afcea/myservicename_1.1.0_x86_64
  389  wget https://raw.githubusercontent.com/open-horizon/examples/master/tools/loadResources; chmod +x loadResources
  390  ./loadResources myservice.json
  391  hzn deploycheck all -b policy-ibm.myservicename_1.1.0 -n afcea-edge
  392  hzn exchange business listpolicy policy-ibm.myservicename_1.1.0
  393  hzn exchange business listpolicy policy-ibm.myservicename_1.1.0 > deployment.json
  394  nano deployment.json
  395  ./loadResources deployment.json
  396  hzn deploycheck all -b policy-ibm.myservicename_1.1.0 -n afcea-edge
  397  hzn eventlog list
  398  hzn eventlog list -f
  399  docker ps
  400  hzn eventlog list
  401  docker images
  402  hzn eventlog list
  403  cat myservice.json
  404  hzn exchange service listauth afcea/myservicename_1.1.0_x86_64
  405  hzn key create jeff jeff
  406  export KEY_TEST_DIR=/home/afcea/.hzn/keys
  407  hzn exchange service publish -r "fkuntke/hofbox-chirpstackus:20240131::" -I  -f myservice.json -k ${KEY_TEST_DIR}/service.pri>
  408  cat myservice.json
  409  nano myservice2.json
  410  hzn exchange service publish -r "fkuntke/hofbox-chirpstackus:20240131::" -I  -f myservice2.json -k ${KEY_TEST_DIR}/service.pr>
  411  hzn eventlog list
  412  hzn eventlog list -f
  413  hzn exchange service listauth afcea/myservicename_1.1.0_amd64
  414  hzn eventlog list -f
  415*
  416  hzn agreement cancel 61d4d3b22ee0dba8185aa7274b34ebcb620a8fa2a725f1423c2123a76560c5cf
  417  hzn eventlog list -f
  418  hzn exchange service listauth afcea/myservicename_1.1.0_amd64
  419  hzn exchange service publish -r "default-route-openshift-image-registry.apps.afcea.demo.local:doesntmatter:sha256~0rJSZajQ6u1DzYUqLs6nz32P-OLqk9CAawG_ZU16RTo" -I  -f myservice.json -k ${KEY_TEST_DIR}/service.private.key -K ${KEY_TEST_DIR}/service.public.pem
